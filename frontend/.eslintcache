[{"E:\\sd-new\\frontend\\src\\index.js":"1","E:\\sd-new\\frontend\\src\\store.js":"2","E:\\sd-new\\frontend\\src\\App.js":"3","E:\\sd-new\\frontend\\src\\reportWebVitals.js":"4","E:\\sd-new\\frontend\\src\\reducers\\productReducers.js":"5","E:\\sd-new\\frontend\\src\\reducers\\orderReducers.js":"6","E:\\sd-new\\frontend\\src\\reducers\\userReducers.js":"7","E:\\sd-new\\frontend\\src\\reducers\\cartReducers.js":"8","E:\\sd-new\\frontend\\src\\screens\\LoginScreen.js":"9","E:\\sd-new\\frontend\\src\\screens\\ProfileScreen.js":"10","E:\\sd-new\\frontend\\src\\screens\\RegisterScreen.js":"11","E:\\sd-new\\frontend\\src\\screens\\PaymentScreen.js":"12","E:\\sd-new\\frontend\\src\\screens\\ShippingScreen.js":"13","E:\\sd-new\\frontend\\src\\screens\\UserListScreen.js":"14","E:\\sd-new\\frontend\\src\\screens\\UserEditScreen.js":"15","E:\\sd-new\\frontend\\src\\screens\\ProductEditScreen.js":"16","E:\\sd-new\\frontend\\src\\screens\\ProductScreen.js":"17","E:\\sd-new\\frontend\\src\\components\\Footer.js":"18","E:\\sd-new\\frontend\\src\\components\\Header.js":"19","E:\\sd-new\\frontend\\src\\screens\\CartScreen.js":"20","E:\\sd-new\\frontend\\src\\screens\\HomeScreen.js":"21","E:\\sd-new\\frontend\\src\\screens\\OrderScreen.js":"22","E:\\sd-new\\frontend\\src\\screens\\PlaceOrderScreen.js":"23","E:\\sd-new\\frontend\\src\\screens\\ProductListScreen.js":"24","E:\\sd-new\\frontend\\src\\screens\\OrderListScreen.js":"25","E:\\sd-new\\frontend\\src\\screens\\CustomDoorScreen.js":"26","E:\\sd-new\\frontend\\src\\components\\Loader.js":"27","E:\\sd-new\\frontend\\src\\components\\FormContainer.js":"28","E:\\sd-new\\frontend\\src\\components\\Message.js":"29","E:\\sd-new\\frontend\\src\\components\\CheckoutSteps.js":"30","E:\\sd-new\\frontend\\src\\constants\\orderConstants.js":"31","E:\\sd-new\\frontend\\src\\constants\\userConstants.js":"32","E:\\sd-new\\frontend\\src\\constants\\cartConstants.js":"33","E:\\sd-new\\frontend\\src\\constants\\productConstants.js":"34","E:\\sd-new\\frontend\\src\\actions\\userActions.js":"35","E:\\sd-new\\frontend\\src\\actions\\cartActions.js":"36","E:\\sd-new\\frontend\\src\\actions\\orderActions.js":"37","E:\\sd-new\\frontend\\src\\actions\\productActions.js":"38","E:\\sd-new\\frontend\\src\\components\\Rating.js":"39","E:\\sd-new\\frontend\\src\\components\\SearchBox.js":"40","E:\\sd-new\\frontend\\src\\components\\Paginate.js":"41","E:\\sd-new\\frontend\\src\\components\\Product.js":"42","E:\\sd-new\\frontend\\src\\components\\ProductCarousel.js":"43","E:\\sd-new\\frontend\\src\\screens\\AboutScreen.js":"44","E:\\sd-new\\frontend\\src\\reducers\\notificationReducers.js":"45","E:\\sd-new\\frontend\\src\\screens\\NotificationCenterScreen.js":"46","E:\\sd-new\\frontend\\src\\screens\\NotificationEditScreen.js":"47","E:\\sd-new\\frontend\\src\\constants\\notificationConstants.js":"48","E:\\sd-new\\frontend\\src\\actions\\notificationActions.js":"49"},{"size":662,"mtime":1656666521901,"results":"50","hashOfConfig":"51"},{"size":3050,"mtime":1656666221730,"results":"52","hashOfConfig":"51"},{"size":2819,"mtime":1656666521899,"results":"53","hashOfConfig":"51"},{"size":375,"mtime":1655471180664,"results":"54","hashOfConfig":"51"},{"size":4900,"mtime":1655716782594,"results":"55","hashOfConfig":"51"},{"size":4276,"mtime":1655471180664,"results":"56","hashOfConfig":"51"},{"size":4100,"mtime":1655471180664,"results":"57","hashOfConfig":"51"},{"size":1545,"mtime":1655471180663,"results":"58","hashOfConfig":"51"},{"size":2629,"mtime":1655471180665,"results":"59","hashOfConfig":"51"},{"size":6950,"mtime":1656666521905,"results":"60","hashOfConfig":"51"},{"size":4038,"mtime":1655706637433,"results":"61","hashOfConfig":"51"},{"size":2469,"mtime":1656674627139,"results":"62","hashOfConfig":"51"},{"size":3264,"mtime":1655471180669,"results":"63","hashOfConfig":"51"},{"size":3602,"mtime":1655471180669,"results":"64","hashOfConfig":"51"},{"size":4022,"mtime":1655471180669,"results":"65","hashOfConfig":"51"},{"size":8141,"mtime":1655471180668,"results":"66","hashOfConfig":"51"},{"size":11758,"mtime":1656666521904,"results":"67","hashOfConfig":"51"},{"size":4008,"mtime":1656666521899,"results":"68","hashOfConfig":"51"},{"size":3775,"mtime":1656666521900,"results":"69","hashOfConfig":"51"},{"size":4830,"mtime":1656666521902,"results":"70","hashOfConfig":"51"},{"size":1930,"mtime":1656666521903,"results":"71","hashOfConfig":"51"},{"size":10824,"mtime":1656675294670,"results":"72","hashOfConfig":"51"},{"size":6691,"mtime":1656669908685,"results":"73","hashOfConfig":"51"},{"size":5134,"mtime":1655716782598,"results":"74","hashOfConfig":"51"},{"size":3634,"mtime":1655716782597,"results":"75","hashOfConfig":"51"},{"size":5721,"mtime":1656666221729,"results":"76","hashOfConfig":"51"},{"size":479,"mtime":1655471180659,"results":"77","hashOfConfig":"51"},{"size":394,"mtime":1655471180659,"results":"78","hashOfConfig":"51"},{"size":240,"mtime":1655471180659,"results":"79","hashOfConfig":"51"},{"size":1645,"mtime":1655471180658,"results":"80","hashOfConfig":"51"},{"size":1270,"mtime":1655471180662,"results":"81","hashOfConfig":"51"},{"size":1514,"mtime":1655471180662,"results":"82","hashOfConfig":"51"},{"size":294,"mtime":1655471180661,"results":"83","hashOfConfig":"51"},{"size":1812,"mtime":1655716782594,"results":"84","hashOfConfig":"51"},{"size":7699,"mtime":1655471180657,"results":"85","hashOfConfig":"51"},{"size":1365,"mtime":1655471180656,"results":"86","hashOfConfig":"51"},{"size":6285,"mtime":1655471180656,"results":"87","hashOfConfig":"51"},{"size":7226,"mtime":1655716782591,"results":"88","hashOfConfig":"51"},{"size":1957,"mtime":1655471180661,"results":"89","hashOfConfig":"51"},{"size":1022,"mtime":1655471180661,"results":"90","hashOfConfig":"51"},{"size":887,"mtime":1655471180660,"results":"91","hashOfConfig":"51"},{"size":1045,"mtime":1655716782593,"results":"92","hashOfConfig":"51"},{"size":1459,"mtime":1656666521901,"results":"93","hashOfConfig":"51"},{"size":1740,"mtime":1656666521902,"results":"94","hashOfConfig":"51"},{"size":3310,"mtime":1656666221728,"results":"95","hashOfConfig":"51"},{"size":5244,"mtime":1656666221730,"results":"96","hashOfConfig":"51"},{"size":4497,"mtime":1656666221730,"results":"97","hashOfConfig":"51"},{"size":1230,"mtime":1656666221728,"results":"98","hashOfConfig":"51"},{"size":4703,"mtime":1656666221727,"results":"99","hashOfConfig":"51"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},"1uycahu",{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"102"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"102"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"102"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"102"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"102"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"102"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"102"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"102"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"102"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"154","messages":"155","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"102"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"102"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"102"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"102"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"102"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"102"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"102"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"102"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"102"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"102"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"102"},"E:\\sd-new\\frontend\\src\\index.js",[],["219","220"],"E:\\sd-new\\frontend\\src\\store.js",[],"E:\\sd-new\\frontend\\src\\App.js",[],"E:\\sd-new\\frontend\\src\\reportWebVitals.js",[],"E:\\sd-new\\frontend\\src\\reducers\\productReducers.js",[],"E:\\sd-new\\frontend\\src\\reducers\\orderReducers.js",[],"E:\\sd-new\\frontend\\src\\reducers\\userReducers.js",[],"E:\\sd-new\\frontend\\src\\reducers\\cartReducers.js",[],"E:\\sd-new\\frontend\\src\\screens\\LoginScreen.js",[],"E:\\sd-new\\frontend\\src\\screens\\ProfileScreen.js",["221","222"],"import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Form, Button, Row, Col, Table } from 'react-bootstrap'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport { getUserDetails, updateUserProfile } from '../actions/userActions'\r\nimport { USER_UPDATE_PROFILE_RESET } from '../constants/userConstants'\r\nimport { listMyOrders } from '../actions/orderActions'\r\n\r\nfunction ProfileScreen({ history }) {\r\n\r\n    const [name, setName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [message, setMessage] = useState('')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userDetails = useSelector(state => state.userDetails)\r\n    const { error, loading, user } = userDetails\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    const userUpdateProfile = useSelector(state => state.userUpdateProfile)\r\n    const { success } = userUpdateProfile\r\n\r\n    const orderListMy = useSelector(state => state.orderListMy)\r\n    const { loading: loadingOrders, error: errorOrders, orders } = orderListMy\r\n\r\n\r\n    useEffect(() => {\r\n        if (!userInfo) {\r\n            history.push('/login')\r\n        } else {\r\n            if (!user || !user.name || success || userInfo._id !== user._id) {\r\n                dispatch({ type: USER_UPDATE_PROFILE_RESET })\r\n                dispatch(getUserDetails('profile'))\r\n                dispatch(listMyOrders())\r\n            } else {\r\n                setName(user.name)\r\n                setEmail(user.email)\r\n            }\r\n        }\r\n    }, [dispatch, history, userInfo, user, success])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n\r\n        if (password != confirmPassword) {\r\n            setMessage('Passwords do not match')\r\n        } else {\r\n            dispatch(updateUserProfile({\r\n                'id': user._id,\r\n                'name': name,\r\n                'email': email,\r\n                'password': password\r\n            }))\r\n            setMessage('')\r\n        }\r\n\r\n    }\r\n    return (\r\n        <Row>\r\n            <Col md={3}>\r\n                <h2>User Profile</h2>\r\n\r\n                {message && <Message variant='danger'>{message}</Message>}\r\n                {error && <Message variant='danger'>{error}</Message>}\r\n                {loading && <Loader />}\r\n                <Form onSubmit={submitHandler}>\r\n\r\n                    <Form.Group controlId='name'>\r\n                        <Form.Label>Name</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type='name'\r\n                            placeholder='Enter name'\r\n                            value={name}\r\n                            onChange={(e) => setName(e.target.value)}\r\n                        >\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId='email'>\r\n                        <Form.Label>Email Address</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type='email'\r\n                            placeholder='Enter Email'\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                        >\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId='password'>\r\n                        <Form.Label>Password</Form.Label>\r\n                        <Form.Control\r\n\r\n                            type='password'\r\n                            placeholder='Enter Password'\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        >\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId='passwordConfirm'>\r\n                        <Form.Label>Confirm Password</Form.Label>\r\n                        <Form.Control\r\n\r\n                            type='password'\r\n                            placeholder='Confirm Password'\r\n                            value={confirmPassword}\r\n                            onChange={(e) => setConfirmPassword(e.target.value)}\r\n                        >\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Button type='submit' variant='primary'>\r\n                        Update\r\n                </Button>\r\n\r\n                </Form>\r\n            </Col>\r\n\r\n            <Col md={9}>\r\n                <h2>My Orders</h2>\r\n                {loadingOrders ? (\r\n                    <Loader />\r\n                ) : errorOrders ? (\r\n                    <Message variant='danger'>{errorOrders}</Message>\r\n                ) : (\r\n                            <Table striped responsive className='table-sm'>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>ID</th>\r\n                                        <th>Date</th>\r\n                                        <th>Total</th>\r\n                                        <th>Paid</th>\r\n                                        <th>Delivered</th>\r\n                                        <th></th>\r\n                                    </tr>\r\n                                </thead>\r\n\r\n                                <tbody>\r\n                                    {orders.map(order => (\r\n                                        <tr key={order._id}>\r\n                                            <td>{order._id}</td>\r\n                                            <td>{order.createdAt.substring(0, 10)}</td>\r\n                                            <td>Rp. {order.totalPrice}</td>\r\n                                            <td>{order.isPaid ? order.paidAt.substring(0, 10) : (\r\n                                                <i className='fas fa-times' style={{ color: 'red' }}></i>\r\n                                            )}</td>\r\n                                            <td>\r\n                                                <LinkContainer to={`/order/${order._id}`}>\r\n                                                    <Button className='btn-sm'>Details</Button>\r\n                                                </LinkContainer>\r\n                                            </td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </Table>\r\n                        )}\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default ProfileScreen","E:\\sd-new\\frontend\\src\\screens\\RegisterScreen.js",["223"],"import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Form, Button, Row, Col } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport FormContainer from '../components/FormContainer'\r\nimport { register } from '../actions/userActions'\r\n\r\nfunction RegisterScreen({ location, history }) {\r\n\r\n    const [name, setName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [message, setMessage] = useState('')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const redirect = location.search ? location.search.split('=')[1] : '/'\r\n\r\n    const userRegister = useSelector(state => state.userRegister)\r\n    const { error, loading, userInfo } = userRegister\r\n\r\n    useEffect(() => {\r\n        if (userInfo) {\r\n            history.push(redirect)\r\n        }\r\n    }, [history, userInfo, redirect])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n\r\n        if (password != confirmPassword) {\r\n            setMessage('Passwords do not match')\r\n        } else {\r\n            dispatch(register(name, email, password))\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <FormContainer>\r\n            <h1>Sign In</h1>\r\n            {message && <Message variant='danger'>{message}</Message>}\r\n            {error && <Message variant='danger'>{error}</Message>}\r\n            {loading && <Loader />}\r\n            <Form onSubmit={submitHandler}>\r\n\r\n                <Form.Group controlId='name'>\r\n                    <Form.Label>Name</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='name'\r\n                        placeholder='Enter name'\r\n                        value={name}\r\n                        onChange={(e) => setName(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='email'>\r\n                    <Form.Label>Email Address</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='email'\r\n                        placeholder='Enter Email'\r\n                        value={email}\r\n                        onChange={(e) => setEmail(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='password'>\r\n                    <Form.Label>Password</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='password'\r\n                        placeholder='Enter Password'\r\n                        value={password}\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='passwordConfirm'>\r\n                    <Form.Label>Confirm Password</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='password'\r\n                        placeholder='Confirm Password'\r\n                        value={confirmPassword}\r\n                        onChange={(e) => setConfirmPassword(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Button type='submit' variant='primary'>\r\n                    Register\r\n                </Button>\r\n\r\n            </Form>\r\n\r\n            <Row className='py-3'>\r\n                <Col>\r\n                    Have an Account? <Link\r\n                        to={redirect ? `/login?redirect=${redirect}` : '/login'}>\r\n                        Sign In\r\n                        </Link>\r\n                </Col>\r\n            </Row>\r\n        </FormContainer >\r\n    )\r\n}\r\n\r\nexport default RegisterScreen\r\n","E:\\sd-new\\frontend\\src\\screens\\PaymentScreen.js",["224"],"E:\\sd-new\\frontend\\src\\screens\\ShippingScreen.js",["225"],"import React, { useState, useEffect } from 'react'\r\nimport { Form, Button } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport FormContainer from '../components/FormContainer'\r\nimport CheckoutSteps from '../components/CheckoutSteps'\r\nimport { saveShippingAddress } from '../actions/cartActions'\r\n\r\nfunction ShippingScreen({ history }) {\r\n\r\n    const cart = useSelector(state => state.cart)\r\n    const { shippingAddress } = cart\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const [address, setAddress] = useState(shippingAddress.address)\r\n    const [city, setCity] = useState(shippingAddress.city)\r\n    const [postalCode, setPostalCode] = useState(shippingAddress.postalCode)\r\n    const [country, setCountry] = useState(shippingAddress.country)\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(saveShippingAddress({ address, city, postalCode, country }))\r\n        history.push('/payment')\r\n    }\r\n\r\n    return (\r\n        <FormContainer>\r\n            <CheckoutSteps step1 step2 />\r\n            <h1>Shipping</h1>\r\n            <Form onSubmit={submitHandler}>\r\n\r\n                <Form.Group controlId='address'>\r\n                    <Form.Label>Address</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='text'\r\n                        placeholder='Enter address'\r\n                        value={address ? address : ''}\r\n                        onChange={(e) => setAddress(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='city'>\r\n                    <Form.Label>City</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='text'\r\n                        placeholder='Enter city'\r\n                        value={city ? city : ''}\r\n                        onChange={(e) => setCity(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='postalCode'>\r\n                    <Form.Label>Postal Code</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='text'\r\n                        placeholder='Enter postal code'\r\n                        value={postalCode ? postalCode : ''}\r\n                        onChange={(e) => setPostalCode(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='country'>\r\n                    <Form.Label>Country</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='text'\r\n                        placeholder='Enter country'\r\n                        value={country ? country : ''}\r\n                        onChange={(e) => setCountry(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Button type='submit' variant='primary'>\r\n                    Continue\r\n                </Button>\r\n            </Form>\r\n        </FormContainer>\r\n    )\r\n}\r\n\r\nexport default ShippingScreen\r\n","E:\\sd-new\\frontend\\src\\screens\\UserListScreen.js",["226"],"import React, { useState, useEffect } from 'react'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { Table, Button } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport { listUsers, deleteUser } from '../actions/userActions'\r\n\r\nfunction UserListScreen({ history }) {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userList = useSelector(state => state.userList)\r\n    const { loading, error, users } = userList\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    const userDelete = useSelector(state => state.userDelete)\r\n    const { success: successDelete } = userDelete\r\n\r\n\r\n    useEffect(() => {\r\n        if (userInfo && userInfo.isAdmin) {\r\n            dispatch(listUsers())\r\n        } else {\r\n            history.push('/login')\r\n        }\r\n\r\n    }, [dispatch, history, successDelete, userInfo])\r\n\r\n\r\n    const deleteHandler = (id) => {\r\n\r\n        if (window.confirm('Are you sure you want to delete this user?')) {\r\n            dispatch(deleteUser(id))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Users</h1>\r\n            {loading\r\n                ? (<Loader />)\r\n                : error\r\n                    ? (<Message variant='danger'>{error}</Message>)\r\n                    : (\r\n                        <Table striped bordered hover responsive className='table-sm'>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>ID</th>\r\n                                    <th>NAME</th>\r\n                                    <th>EMAIL</th>\r\n                                    <th>ADMIN</th>\r\n                                    <th></th>\r\n                                </tr>\r\n                            </thead>\r\n\r\n                            <tbody>\r\n                                {users.map(user => (\r\n                                    <tr key={user._id}>\r\n                                        <td>{user._id}</td>\r\n                                        <td>{user.name}</td>\r\n                                        <td>{user.email}</td>\r\n                                        <td>{user.isAdmin ? (\r\n                                            <i className='fas fa-check' style={{ color: 'green' }}></i>\r\n                                        ) : (\r\n                                                <i className='fas fa-check' style={{ color: 'red' }}></i>\r\n                                            )}</td>\r\n\r\n                                        <td>\r\n                                            <LinkContainer to={`/admin/user/${user._id}/edit`}>\r\n                                                <Button variant='light' className='btn-sm'>\r\n                                                    <i className='fas fa-edit'></i>\r\n                                                </Button>\r\n                                            </LinkContainer>\r\n\r\n                                            <Button variant='danger' className='btn-sm' onClick={() => deleteHandler(user._id)}>\r\n                                                <i className='fas fa-trash'></i>\r\n                                            </Button>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserListScreen\r\n","E:\\sd-new\\frontend\\src\\screens\\UserEditScreen.js",["227"],"import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Form, Button } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport FormContainer from '../components/FormContainer'\r\nimport { getUserDetails, updateUser } from '../actions/userActions'\r\nimport { USER_UPDATE_RESET } from '../constants/userConstants'\r\n\r\nfunction UserEditScreen({ match, history }) {\r\n\r\n    const userId = match.params.id\r\n\r\n    const [name, setName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [isAdmin, setIsAdmin] = useState(false)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userDetails = useSelector(state => state.userDetails)\r\n    const { error, loading, user } = userDetails\r\n\r\n    const userUpdate = useSelector(state => state.userUpdate)\r\n    const { error: errorUpdate, loading: loadingUpdate, success: successUpdate } = userUpdate\r\n\r\n    useEffect(() => {\r\n\r\n        if (successUpdate) {\r\n            dispatch({ type: USER_UPDATE_RESET })\r\n            history.push('/admin/userlist')\r\n        } else {\r\n\r\n            if (!user.name || user._id !== Number(userId)) {\r\n                dispatch(getUserDetails(userId))\r\n            } else {\r\n                setName(user.name)\r\n                setEmail(user.email)\r\n                setIsAdmin(user.isAdmin)\r\n            }\r\n        }\r\n\r\n    }, [user, userId, successUpdate, history])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(updateUser({ _id: user._id, name, email, isAdmin }))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Link to='/admin/userlist'>\r\n                Go Back\r\n            </Link>\r\n\r\n            <FormContainer>\r\n                <h1>Edit User</h1>\r\n                {loadingUpdate && <Loader />}\r\n                {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\r\n\r\n                {loading ? <Loader /> : error ? <Message variant='danger'>{error}</Message>\r\n                    : (\r\n                        <Form onSubmit={submitHandler}>\r\n\r\n                            <Form.Group controlId='name'>\r\n                                <Form.Label>Name</Form.Label>\r\n                                <Form.Control\r\n\r\n                                    type='name'\r\n                                    placeholder='Enter name'\r\n                                    value={name}\r\n                                    onChange={(e) => setName(e.target.value)}\r\n                                >\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group controlId='email'>\r\n                                <Form.Label>Email Address</Form.Label>\r\n                                <Form.Control\r\n                                    type='email'\r\n                                    placeholder='Enter Email'\r\n                                    value={email}\r\n                                    onChange={(e) => setEmail(e.target.value)}\r\n                                >\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group controlId='isadmin'>\r\n                                <Form.Check\r\n                                    type='checkbox'\r\n                                    label='Is Admin'\r\n                                    checked={isAdmin}\r\n                                    onChange={(e) => setIsAdmin(e.target.checked)}\r\n                                >\r\n                                </Form.Check>\r\n                            </Form.Group>\r\n\r\n                            <Button type='submit' variant='primary'>\r\n                                Update\r\n                        </Button>\r\n\r\n                        </Form>\r\n                    )}\r\n\r\n            </FormContainer >\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default UserEditScreen","E:\\sd-new\\frontend\\src\\screens\\ProductEditScreen.js",[],"E:\\sd-new\\frontend\\src\\screens\\ProductScreen.js",["228"],"import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { Row, Col, Image, ListGroup, Button, Card, Form } from 'react-bootstrap'\r\nimport Rating from '../components/Rating'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport { listProductDetails, createProductReview } from '../actions/productActions'\r\nimport { PRODUCT_CREATE_REVIEW_RESET } from '../constants/productConstants'\r\n\r\nfunction ProductScreen({ match, history }) {\r\n    const [qty, setQty] = useState(1)\r\n    const [rating, setRating] = useState(0)\r\n    const [comment, setComment] = useState('')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const productDetails = useSelector(state => state.productDetails)\r\n    const { loading, error, product } = productDetails\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    const productReviewCreate = useSelector(state => state.productReviewCreate)\r\n    const {\r\n        loading: loadingProductReview,\r\n        error: errorProductReview,\r\n        success: successProductReview,\r\n    } = productReviewCreate\r\n\r\n    useEffect(() => {\r\n        if (successProductReview) {\r\n            setRating(0)\r\n            setComment('')\r\n            dispatch({ type: PRODUCT_CREATE_REVIEW_RESET })\r\n        }\r\n\r\n        dispatch(listProductDetails(match.params.id))\r\n\r\n    }, [dispatch, match, successProductReview])\r\n\r\n    const addToCartHandler = () => {\r\n        history.push(`/cart/${match.params.id}?qty=${qty}`)\r\n    }\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(createProductReview(\r\n            match.params.id, {\r\n            rating,\r\n            comment\r\n        }\r\n        ))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Link to='/' className='btn btn-light my-3'>Go Back</Link>\r\n            {loading ?\r\n                <Loader />\r\n                : error\r\n                    ? <Message variant='danger'>{error}</Message>\r\n                    : (\r\n                        <div className='m-4'>\r\n                            <Row>\r\n                                <Col md={6}>\r\n                                    <Image src={product.image} alt={product.name} fluid />\r\n                                </Col>\r\n\r\n\r\n                                <Col md={3}>\r\n                                    <ListGroup variant=\"flush\">\r\n                                        <ListGroup.Item>\r\n                                            <h3>{product.name}</h3>\r\n                                        </ListGroup.Item>\r\n\r\n                                        <ListGroup.Item>\r\n                                            <Rating value={product.rating} text={`${product.numReviews} reviews`} color={'#f8e825'} />\r\n                                        </ListGroup.Item>\r\n\r\n                                        <ListGroup.Item>\r\n                                            Price: Rp.{product.price}\r\n                                        </ListGroup.Item>\r\n\r\n                                        <ListGroup.Item>\r\n                                            Description: {product.description}\r\n                                        </ListGroup.Item>\r\n                                    </ListGroup>\r\n                                </Col>\r\n\r\n\r\n                                <Col md={3}>\r\n                                    <Card>\r\n                                        <ListGroup variant='flush'>\r\n                                            <ListGroup.Item>\r\n                                                <Row>\r\n                                                    <Col>Price:</Col>\r\n                                                    <Col>\r\n                                                        <strong>Rp.{product.price}</strong>\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </ListGroup.Item>\r\n                                            <ListGroup.Item>\r\n                                                <Row>\r\n                                                    <Col>Status:</Col>\r\n                                                    <Col>\r\n                                                        {product.countInStock > 0 ? 'In Stock' : 'Out of Stock'}\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </ListGroup.Item>\r\n\r\n                                            {product.countInStock > 0 && (\r\n                                                <ListGroup.Item>\r\n                                                    <Row>\r\n                                                        <Col>Qty</Col>\r\n                                                        <Col xs='auto' className='my-1'>\r\n                                                            <Form.Control\r\n                                                                as=\"select\"\r\n                                                                value={qty}\r\n                                                                onChange={(e) => setQty(e.target.value)}\r\n                                                            >\r\n                                                                {\r\n\r\n                                                                    [...Array(product.countInStock).keys()].map((x) => (\r\n                                                                        <option key={x + 1} value={x + 1}>\r\n                                                                            {x + 1}\r\n                                                                        </option>\r\n                                                                    ))\r\n                                                                }\r\n\r\n                                                            </Form.Control>\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                </ListGroup.Item>\r\n                                            )}\r\n\r\n\r\n                                            <ListGroup.Item>\r\n                                                <Button\r\n                                                    onClick={addToCartHandler}\r\n                                                    className='btn-block'\r\n                                                    disabled={product.countInStock == 0}\r\n                                                    type='button'>\r\n                                                    Add to Cart\r\n                                                </Button>\r\n                                            </ListGroup.Item>\r\n                                        </ListGroup>\r\n                                    </Card>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col md={6}>\r\n                                    <h4 className='m-4'>Reviews</h4>\r\n                                    {product.reviews.length === 0 && <Message variant='info'>No Reviews</Message>}\r\n\r\n                                    <ListGroup variant='flush'>\r\n                                        {product.reviews.map((review) => (\r\n                                            <ListGroup.Item key={review._id}>\r\n                                                <strong>{review.name}</strong>\r\n                                                <Rating value={review.rating} color='#f8e825' />\r\n                                                <p>{review.createdAt.substring(0, 10)}</p>\r\n                                                <p>{review.comment}</p>\r\n                                            </ListGroup.Item>\r\n                                        ))}\r\n\r\n                                        <ListGroup.Item>\r\n                                            <h4>Write a review</h4>\r\n\r\n                                            {loadingProductReview && <Loader />}\r\n                                            {successProductReview && <Message variant='success'>Review Submitted</Message>}\r\n                                            {errorProductReview && <Message variant='danger'>{errorProductReview}</Message>}\r\n\r\n                                            {userInfo ? (\r\n                                                <Form onSubmit={submitHandler}>\r\n                                                    <Form.Group controlId='rating'>\r\n                                                        <Form.Label>Rating</Form.Label>\r\n                                                        <Form.Control\r\n                                                            as='select'\r\n                                                            value={rating}\r\n                                                            onChange={(e) => setRating(e.target.value)}\r\n                                                        >\r\n                                                            <option value=''>Select...</option>\r\n                                                            <option value='1'>1 - Poor</option>\r\n                                                            <option value='2'>2 - Fair</option>\r\n                                                            <option value='3'>3 - Good</option>\r\n                                                            <option value='4'>4 - Very Good</option>\r\n                                                            <option value='5'>5 - Excellent</option>\r\n                                                        </Form.Control>\r\n                                                    </Form.Group>\r\n\r\n                                                    <Form.Group controlId='comment'>\r\n                                                        <Form.Label>Review</Form.Label>\r\n                                                        <Form.Control\r\n                                                            as='textarea'\r\n                                                            row='5'\r\n                                                            value={comment}\r\n                                                            onChange={(e) => setComment(e.target.value)}\r\n                                                        ></Form.Control>\r\n                                                    </Form.Group>\r\n\r\n                                                    <Button\r\n                                                        disabled={loadingProductReview}\r\n                                                        type='submit'\r\n                                                        variant='primary'\r\n                                                    >\r\n                                                        Submit\r\n                                                    </Button>\r\n\r\n                                                </Form>\r\n                                            ) : (\r\n                                                    <Message variant='info'>Please <Link to='/login'>login</Link> to write a review</Message>\r\n                                                )}\r\n                                        </ListGroup.Item>\r\n                                    </ListGroup>\r\n                                </Col>\r\n                            </Row>\r\n                        </div>\r\n                    )\r\n\r\n            }\r\n\r\n\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default ProductScreen\r\n","E:\\sd-new\\frontend\\src\\components\\Footer.js",["229","230","231","232"],"import React from 'react';\r\nimport { MDBFooter } from 'mdb-react-ui-kit';\r\n\r\nfunction Footer() {\r\n  return (\r\n    <MDBFooter className='text-center text-lg-start text-white' style={{ backgroundColor: '#0058A3'}}>\r\n      <section className='d-flex justify-content-center justify-content-lg-between p-4 border-bottom'>\r\n        <div className='me-5 d-none d-lg-block'>\r\n          <span>Get connected with us on social networks:</span>\r\n        </div>\r\n\r\n        <div>\r\n          <a href='' className='me-4 text-reset'>\r\n            <i className='fab fa-facebook-f'></i>\r\n          </a>\r\n          <a href='' className='me-4 text-reset'>\r\n            <i className='fab fa-twitter'></i>\r\n          </a>\r\n          <a href='' className='me-4 text-reset'>\r\n            <i className='fab fa-google'></i>\r\n          </a>\r\n          <a href='' className='me-4 text-reset'>\r\n            <i className='fab fa-instagram'></i>\r\n          </a>\r\n        </div>\r\n      </section>\r\n\r\n      <section className=''>\r\n        <div className='container text-center text-md-start mt-5'>\r\n          <div className='row mt-3'>\r\n            <div className='col-md-3 col-lg-4 col-xl-3 mx-auto mb-4'>\r\n              <h6 className='text-uppercase fw-bold mb-4' style={{ color: '#ffffff' }}>\r\n                <i className='fas fa-gem me-3'></i>Sarana Pintu\r\n              </h6>\r\n              <p>\r\n                Perusahaan yang bergerak di bidang pintu. Menyediakan jasa kustomisasi lengkap dengan pengiriman.\r\n              </p>\r\n            </div>\r\n\r\n            <div className='col-md-2 col-lg-2 col-xl-2 mx-auto mb-4 text-white'>\r\n              <h6 className='text-uppercase fw-bold mb-4' style={{ color: '#ffffff' }}>Products</h6>\r\n              <p>\r\n                <a href='#?keyword=pintu%20millenial&page=1' className='text-reset'>\r\n                  Pintu Millenial\r\n                </a>\r\n              </p>\r\n              <p>\r\n                <a href='#?keyword=pintu%20pvc%20biasa&page=1' className='text-reset'>\r\n                  Pintu PVC Biasa \r\n                </a>\r\n              </p>\r\n              <p>\r\n                <a href='#?keyword=pintu%20pvc%20panel&page=1' className='text-reset'>\r\n                Pintu PVC Panel\r\n                </a>\r\n              </p>\r\n              <p>\r\n                <a href='#?keyword=pintu%20alumunium&page=1' className='text-reset'>\r\n                  Pintu Alumunium\r\n                </a>\r\n              </p>\r\n            </div>\r\n\r\n            <div className='col-md-3 col-lg-2 col-xl-2 mx-auto mb-4'>\r\n              <h6 className='text-uppercase fw-bold mb-4' style={{ color: '#ffffff' }}>Useful links</h6>\r\n              <p>\r\n                <a href='#customdoor' className='text-reset'>\r\n                  Custom\r\n                </a>\r\n              </p>\r\n              <p>\r\n                <a href='#cart' className='text-reset'>\r\n                  Cart\r\n                </a>\r\n              </p>\r\n              <p>\r\n                <a href='#about' className='text-reset'>\r\n                  About Us\r\n                </a>\r\n              </p>\r\n            </div>\r\n\r\n            <div className='col-md-4 col-lg-3 col-xl-3 mx-auto mb-md-0 mb-4'>\r\n              <h6 className='text-uppercase fw-bold mb-4' style={{ color: '#ffffff' }}>Contact</h6>\r\n              <p>\r\n                <i className='fas fa-home me-3'></i> Jakarta, Indonesia\r\n              </p>\r\n              <p>\r\n                <i className='fas fa-envelope me-3'></i> saranateam@email.com\r\n              </p>\r\n              <p>\r\n                <i className='fas fa-phone me-3'></i> + 618 119 275 222\r\n              </p>\r\n              <p>\r\n                <i className='fas fa-print me-3'></i> + 618 119 275 222\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      <div className='text-center p-4' style={{ backgroundColor: 'rgba(0, 0, 0, 0.05)' }}>\r\n        Copyright &copy; 2022 Sarana Pintu\r\n      </div>\r\n    </MDBFooter>\r\n  );\r\n}\r\n\r\nexport default Footer","E:\\sd-new\\frontend\\src\\components\\Header.js",["233"],"import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Navbar, Nav, Container, Row, NavDropdown } from 'react-bootstrap'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport SearchBox from './SearchBox'\r\nimport { logout } from '../actions/userActions'\r\n\r\nfunction Header() {\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(logout())\r\n    }\r\n\r\n    return (\r\n        <header>\r\n            <Navbar bg=\"light\" variant=\"light\" expand=\"lg\" collapseOnSelect>\r\n                <Container>\r\n                    <LinkContainer to='/'>\r\n                        <Navbar.Brand>Sarana Pintu</Navbar.Brand>\r\n                    </LinkContainer>\r\n\r\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                        <SearchBox />\r\n                        <Nav className=\"ml-auto\">\r\n                            <LinkContainer to='/customdoor'>\r\n                                <Nav.Link ><i className=\"fas fa-solid fa-brush\"></i> Custom</Nav.Link>\r\n                            </LinkContainer>\r\n\r\n                            <LinkContainer to='/cart'>\r\n                                <Nav.Link ><i className=\"fas fa-shopping-cart\"></i> Cart</Nav.Link>\r\n                            </LinkContainer>\r\n                            \r\n                            <LinkContainer to='/about'>\r\n                                <Nav.Link ><i className=\"fas fa-info\"></i> About Us</Nav.Link>\r\n                            </LinkContainer>\r\n\r\n                            {userInfo ? (\r\n                                <NavDropdown title={userInfo.name} id='username'>\r\n                                    <LinkContainer to='/profile'>\r\n                                        <NavDropdown.Item>Profile</NavDropdown.Item>\r\n                                    </LinkContainer>\r\n\r\n                                    <NavDropdown.Item onClick={logoutHandler}>Logout</NavDropdown.Item>\r\n\r\n                                </NavDropdown>\r\n                            ) : (\r\n                                    <LinkContainer to='/login'>\r\n                                        <Nav.Link><i className=\"fas fa-user\"></i>Login</Nav.Link>\r\n                                    </LinkContainer>\r\n                                )}\r\n\r\n\r\n                            {userInfo && userInfo.isAdmin && (\r\n                                <NavDropdown title='Admin' id='adminmenue'>\r\n                                    <LinkContainer to='/admin/userlist'>\r\n                                        <NavDropdown.Item>Users</NavDropdown.Item>\r\n                                    </LinkContainer>\r\n\r\n                                    <LinkContainer to='/admin/productlist'>\r\n                                        <NavDropdown.Item>Products</NavDropdown.Item>\r\n                                    </LinkContainer>\r\n\r\n                                    <LinkContainer to='/admin/orderlist'>\r\n                                        <NavDropdown.Item>Orders</NavDropdown.Item>\r\n                                    </LinkContainer>\r\n\r\n                                    <LinkContainer to='/admin/notificationcenterlist'>\r\n                                        <NavDropdown.Item>Notification Center</NavDropdown.Item>\r\n                                    </LinkContainer>\r\n\r\n                                </NavDropdown>\r\n                            )}\r\n\r\n\r\n                        </Nav>\r\n                    </Navbar.Collapse>\r\n                </Container>\r\n            </Navbar>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","E:\\sd-new\\frontend\\src\\screens\\CartScreen.js",[],"E:\\sd-new\\frontend\\src\\screens\\HomeScreen.js",["234","235"],"import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Row, Col } from 'react-bootstrap'\r\nimport Product from '../components/Product'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport Paginate from '../components/Paginate'\r\nimport ProductCarousel from '../components/ProductCarousel'\r\nimport { listProducts } from '../actions/productActions'\r\n\r\n\r\nfunction HomeScreen({ history }) {\r\n    const dispatch = useDispatch()\r\n    const productList = useSelector(state => state.productList)\r\n    const { error, loading, products, page, pages } = productList\r\n\r\n    let keyword = history.location.search\r\n\r\n    useEffect(() => {\r\n        dispatch(listProducts(keyword))\r\n\r\n    }, [dispatch, keyword])\r\n\r\n    return (\r\n            <div className='m-4'>\r\n                {!keyword && <ProductCarousel />}\r\n\r\n                <h1>Latest Products</h1>\r\n                {loading ? <Loader />\r\n                    : error ? <Message variant='danger'>{error}</Message>\r\n                        :\r\n                        <div>\r\n                            <Row className='m-4'>\r\n                                {products.filter(product => {return product.category != 'Custom'})\r\n                                .map(product => {\r\n                                    return(\r\n                                        <Col key={product._id} sm={12} md={6} lg={4} xl={3}>\r\n                                            <Product product={product} />  \r\n                                        </Col>\r\n                                    );\r\n                                }\r\n\r\n                                )}\r\n                            </Row>\r\n                            <Paginate page={page} pages={pages} keyword={keyword} />\r\n                        </div>\r\n                }\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default HomeScreen\r\n","E:\\sd-new\\frontend\\src\\screens\\OrderScreen.js",["236"],"E:\\sd-new\\frontend\\src\\screens\\PlaceOrderScreen.js",["237","238"],"import React, { useState, useEffect } from 'react'\r\nimport { Button, Row, Col, ListGroup, Image, Card } from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport CheckoutSteps from '../components/CheckoutSteps'\r\nimport { createOrder } from '../actions/orderActions'\r\nimport { ORDER_CREATE_RESET } from '../constants/orderConstants'\r\n\r\nfunction PlaceOrderScreen({ history }) {\r\n\r\n    const orderCreate = useSelector(state => state.orderCreate)\r\n    const { order, error, success } = orderCreate\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const cart = useSelector(state => state.cart)\r\n\r\n    cart.itemsPrice = cart.cartItems.reduce((acc, item) => acc + item.price * item.qty, 0)\r\n    cart.shippingPrice = (cart.itemsPrice > 100 ? 0 : 10)\r\n    cart.taxPrice = Number((0.082) * cart.itemsPrice)\r\n\r\n    cart.totalPrice = (Number(cart.itemsPrice) + Number(cart.shippingPrice) + Number(cart.taxPrice))\r\n\r\n\r\n    if (!cart.paymentMethod) {\r\n        history.push('/payment')\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (success) {\r\n            history.push(`/order/${order._id}`)\r\n            dispatch({ type: ORDER_CREATE_RESET })\r\n        }\r\n    }, [success, history])\r\n\r\n    const placeOrder = () => {\r\n        dispatch(createOrder({\r\n            orderItems: cart.cartItems,\r\n            shippingAddress: cart.shippingAddress,\r\n            paymentMethod: cart.paymentMethod,\r\n            itemsPrice: cart.itemsPrice,\r\n            shippingPrice: cart.shippingPrice,\r\n            taxPrice: cart.taxPrice,\r\n            totalPrice: cart.totalPrice,\r\n        }))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <CheckoutSteps step1 step2 step3 step4 />\r\n            <Row>\r\n                <Col md={8}>\r\n                    <ListGroup variant='flush'>\r\n                        <ListGroup.Item>\r\n                            <h2>Shipping</h2>\r\n\r\n                            <p>\r\n                                <strong>Shipping: </strong>\r\n                                {cart.shippingAddress.address},  {cart.shippingAddress.city}\r\n                                {'  '}\r\n                                {cart.shippingAddress.postalCode},\r\n                                {'  '}\r\n                                {cart.shippingAddress.country}\r\n                            </p>\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <h2>Payment Method</h2>\r\n                            <p>\r\n                                <strong>Method: </strong>\r\n                                {cart.paymentMethod}\r\n                            </p>\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <h2>Order Items</h2>\r\n                            {cart.cartItems.length === 0 ? <Message variant='info'>\r\n                                Your cart is empty\r\n                            </Message> : (\r\n                                    <ListGroup variant='flush'>\r\n                                        {cart.cartItems.map((item, index) => (\r\n                                            <ListGroup.Item key={index}>\r\n                                                <Row>\r\n                                                    <Col md={1}>\r\n                                                        <Image src={item.image} alt={item.name} fluid rounded />\r\n                                                    </Col>\r\n\r\n                                                    <Col>\r\n                                                        <Link to={`/product/${item.product}`}>{item.name}</Link>\r\n                                                    </Col>\r\n\r\n                                                    <Col md={4}>\r\n                                                        {item.qty} X Rp. {item.price} = Rp. {(item.qty * item.price)}\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </ListGroup.Item>\r\n                                        ))}\r\n                                    </ListGroup>\r\n                                )}\r\n                        </ListGroup.Item>\r\n\r\n                    </ListGroup>\r\n\r\n                </Col>\r\n\r\n                <Col md={4}>\r\n                    <Card>\r\n                        <ListGroup variant='flush'>\r\n                            <ListGroup.Item>\r\n                                <h2>Order Summary</h2>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Items:</Col>\r\n                                    <Col>Rp. {cart.itemsPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Shipping:</Col>\r\n                                    <Col>Rp. {cart.shippingPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Tax:</Col>\r\n                                    <Col>Rp. {cart.taxPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Total:</Col>\r\n                                    <Col>Rp. {cart.totalPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n\r\n                            <ListGroup.Item>\r\n                                {error && <Message variant='danger'>{error}</Message>}\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Button\r\n                                    type='button'\r\n                                    className='btn-block'\r\n                                    disabled={cart.cartItems === 0}\r\n                                    onClick={placeOrder}\r\n                                >\r\n                                    Place Order\r\n                                </Button>\r\n                            </ListGroup.Item>\r\n\r\n                        </ListGroup>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlaceOrderScreen","E:\\sd-new\\frontend\\src\\screens\\ProductListScreen.js",["239"],"import React, { useState, useEffect } from 'react'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { Table, Button, Row, Col } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport Paginate from '../components/Paginate'\r\nimport { listProducts, deleteProduct, createProduct } from '../actions/productActions'\r\nimport { PRODUCT_CREATE_RESET } from '../constants/productConstants'\r\n\r\nfunction ProductListScreen({ history, match }) {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const productList = useSelector(state => state.productList)\r\n    const { loading, error, products, pages, page } = productList\r\n\r\n    const productDelete = useSelector(state => state.productDelete)\r\n    const { loading: loadingDelete, error: errorDelete, success: successDelete } = productDelete\r\n\r\n    const productCreate = useSelector(state => state.productCreate)\r\n    const { loading: loadingCreate, error: errorCreate, success: successCreate, product: createdProduct } = productCreate\r\n\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    let keyword = history.location.search\r\n    useEffect(() => {\r\n        dispatch({ type: PRODUCT_CREATE_RESET })\r\n\r\n        if (!userInfo.isAdmin) {\r\n            history.push('/login')\r\n        }\r\n\r\n        if (successCreate) {\r\n            history.push(`/admin/product/${createdProduct._id}/edit`)\r\n        } else {\r\n            dispatch(listProducts(keyword))\r\n        }\r\n\r\n    }, [dispatch, history, userInfo, successDelete, successCreate, createdProduct, keyword])\r\n\r\n\r\n    const deleteHandler = (id) => {\r\n\r\n        if (window.confirm('Are you sure you want to delete this product?')) {\r\n            dispatch(deleteProduct(id))\r\n        }\r\n    }\r\n\r\n    const createProductHandler = () => {\r\n        dispatch(createProduct())\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Row className='align-items-center'>\r\n                <Col>\r\n                    <h1>Products</h1>\r\n                </Col>\r\n\r\n                <Col className='text-right'>\r\n                    <Button className='my-3' onClick={createProductHandler}>\r\n                        <i className='fas fa-plus'></i> Create Product\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n\r\n            {loadingDelete && <Loader />}\r\n            {errorDelete && <Message variant='danger'>{errorDelete}</Message>}\r\n\r\n\r\n            {loadingCreate && <Loader />}\r\n            {errorCreate && <Message variant='danger'>{errorCreate}</Message>}\r\n\r\n            {loading\r\n                ? (<Loader />)\r\n                : error\r\n                    ? (<Message variant='danger'>{error}</Message>)\r\n                    : (\r\n                        <div>\r\n                            <Table striped bordered hover responsive className='table-sm'>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>ID</th>\r\n                                        <th>NAME</th>\r\n                                        <th>PRICE</th>\r\n                                        <th>CATEGORY</th>\r\n                                        <th>BRAND</th>\r\n                                        <th></th>\r\n                                    </tr>\r\n                                </thead>\r\n\r\n                                <tbody>\r\n                                    {products.map(product => (\r\n                                        <tr key={product._id}>\r\n                                            <td>{product._id}</td>\r\n                                            <td>{product.name}</td>\r\n                                            <td>Rp.{product.price}</td>\r\n                                            <td>{product.category}</td>\r\n                                            <td>{product.brand}</td>\r\n\r\n                                            <td>\r\n                                                <LinkContainer to={`/admin/product/${product._id}/edit`}>\r\n                                                    <Button variant='light' className='btn-sm'>\r\n                                                        <i className='fas fa-edit'></i>\r\n                                                    </Button>\r\n                                                </LinkContainer>\r\n\r\n                                                <Button variant='danger' className='btn-sm' onClick={() => deleteHandler(product._id)}>\r\n                                                    <i className='fas fa-trash'></i>\r\n                                                </Button>\r\n                                            </td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </Table>\r\n                            <Paginate pages={pages} page={page} isAdmin={true} />\r\n                        </div>\r\n                    )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProductListScreen","E:\\sd-new\\frontend\\src\\screens\\OrderListScreen.js",["240"],"import React, { useState, useEffect } from 'react'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { Table, Button } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport { listOrders } from '../actions/orderActions'\r\n\r\nfunction OrderListScreen({ history }) {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const orderList = useSelector(state => state.orderList)\r\n    const { loading, error, orders } = orderList\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if (userInfo && userInfo.isAdmin) {\r\n            dispatch(listOrders())\r\n        } else {\r\n            history.push('/login')\r\n        }\r\n\r\n    }, [dispatch, history, userInfo])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1>Orders</h1>\r\n            {loading\r\n                ? (<Loader />)\r\n                : error\r\n                    ? (<Message variant='danger'>{error}</Message>)\r\n                    : (\r\n                        <Table striped bordered hover responsive className='table-sm'>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>ID</th>\r\n                                    <th>USER</th>\r\n                                    <th>DATE</th>\r\n                                    <th>Total</th>\r\n                                    <th>PAID</th>\r\n                                    <th>DELIVERED</th>\r\n                                    <th></th>\r\n                                </tr>\r\n                            </thead>\r\n\r\n                            <tbody>\r\n                                {orders.map(order => (\r\n                                    <tr key={order._id}>\r\n                                        <td>{order._id}</td>\r\n                                        <td>{order.user && order.user.name}</td>\r\n                                        <td>{order.createdAt.substring(0, 10)}</td>\r\n                                        <td>Rp.{order.totalPrice}</td>\r\n\r\n                                        <td>{order.isPaid ? (\r\n                                            order.paidAt.substring(0, 10)\r\n                                        ) : (\r\n                                                <i className='fas fa-check' style={{ color: 'red' }}></i>\r\n                                            )}\r\n                                        </td>\r\n\r\n                                        <td>{order.isDelivered ? (\r\n                                            order.deliveredAt.substring(0, 10)\r\n                                        ) : (\r\n                                                <i className='fas fa-check' style={{ color: 'red' }}></i>\r\n                                            )}\r\n                                        </td>\r\n\r\n                                        <td>\r\n                                            <LinkContainer to={`/order/${order._id}`}>\r\n                                                <Button variant='light' className='btn-sm'>\r\n                                                    Details\r\n                                                </Button>\r\n                                            </LinkContainer>\r\n\r\n\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OrderListScreen","E:\\sd-new\\frontend\\src\\screens\\CustomDoorScreen.js",["241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263"],"import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Row, Col, ListGroup, Image, Form, Button, Card } from 'react-bootstrap'\r\nimport Message from '../components/Message'\r\nimport { addToCart, removeFromCart } from '../actions/cartActions'\r\nimport ProductCarousel from '../components/ProductCarousel'\r\nimport { listProducts, deleteProduct, createProductV2 } from '../actions/productActions'\r\nimport { PRODUCT_CREATE_V2_RESET } from '../constants/productConstants'\r\n\r\nfunction CustomDoorScreen({ match, location, history }) {\r\n    const dispatch = useDispatch()\r\n\r\n    const [lebar, setLebar] = useState(\"\")\r\n    const [tinggi, setTinggi] = useState(\"\")\r\n    const [kuantitas, setKuantitas] = useState(0)\r\n    const [warna, setWarna] = useState(\"\")\r\n    const [tipe, setTipe] = useState(\"\")\r\n    const [kunci, setKunci] = useState(\"\")\r\n    const [totalHarga, setTotalHarga] = useState(\"\")\r\n\r\n    const productList = useSelector(state => state.productList)\r\n    const { loading, error, products, pages, page } = productList\r\n\r\n    const productDelete = useSelector(state => state.productDelete)\r\n    const { loading: loadingDelete, error: errorDelete, success: successDelete } = productDelete\r\n\r\n    const productCreateV2 = useSelector(state => state.productCreateV2)\r\n    const { loading: loadingCreateV2, error: errorCreateV2, success: successCreateV2, product: createdProductV2 } = productCreateV2\r\n\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    let keyword = history.location.search\r\n    useEffect(() => {\r\n        dispatch({ type: PRODUCT_CREATE_V2_RESET })\r\n\r\n        if (successCreateV2) {\r\n            history.push(`/cart/${createdProductV2._id}?qty=${createdProductV2.countInStock}`)\r\n        } else {\r\n            dispatch(listProducts(keyword))\r\n        }\r\n\r\n    }, [dispatch, history, userInfo, successDelete, successCreateV2, createdProductV2, keyword])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(createProductV2({\r\n            name: \"Pintu Custom \" +lebar + \" x \" + tinggi,\r\n            price: parseInt((parseInt(lebar)+parseInt(tinggi))*parseInt(kuantitas)*2250),\r\n            brand: \"Sarana Pintu\",\r\n            category: \"Custom\",\r\n            countInStock: kuantitas,\r\n            description: \"Pintu Custom dengan detail: \\n\" + \"Warna: \" + warna + \"\\n\" + \"Tipe: \" + tipe + \"\\n\" + \"Kunci: \" + kunci + \"\\n\"\r\n        }))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Form onSubmit={submitHandler}>\r\n                <Row>\r\n                    <Col>\r\n                    <Form.Group className=\"mb-3\" controlId=\"formUkuranLebar\">\r\n                    <Form.Label>Lebar</Form.Label>\r\n                    <Form.Control type=\"number\" placeholder=\"Lebar\" onChange={(e) => setLebar(e.target.value)}/>\r\n                </Form.Group>\r\n                    </Col>\r\n                    <Col>\r\n                    <Form.Group className=\"mb-3\" controlId=\"formUkuranTinggi\">\r\n                    <Form.Label>Tinggi</Form.Label>\r\n                    <Form.Control type=\"number\" placeholder=\"Tinggi\" onChange={(e) => setTinggi(e.target.value)}/>\r\n                </Form.Group>\r\n\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Form.Group  className=\"mb-3\" controlId=\"formWarna\">\r\n                    <Form.Label>Tipe</Form.Label>\r\n                    <Form.Control as=\"select\" onChange={(e) => setWarna(e.target.value)}>\r\n                        <option>Merah</option>\r\n                        <option>Kuning</option>\r\n                        <option>Hijau</option>\r\n                        <option>Jingga</option>\r\n                        <option>Biru</option>\r\n                        <option>Nila</option>\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group  className=\"mb-3\" controlId=\"formKunci\">\r\n                    <Form.Label>Kunci</Form.Label>\r\n                    <Form.Control as=\"select\" onChange={(e) => setKunci(e.target.value)}>\r\n                        <option>Gagang</option>\r\n                        <option>Kenob</option>\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group  className=\"mb-3\" controlId=\"formTipe\">\r\n                    <Form.Label>Tipe</Form.Label>\r\n                    <Form.Control as=\"select\" onChange={(e) => setTipe(e.target.value)}>\r\n                        <option>Pintu Millenial</option>\r\n                        <option>Pintu PVC Biasa</option>\r\n                        <option>Pintu PVC Panel</option>\r\n                        <option>Pintu Alumunium</option>\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3\" controlId=\"Kuantitas\">\r\n                    <Form.Label>Kuantitas</Form.Label>\r\n                    <Form.Control type=\"number\" placeholder=\"Kuantitas\" min={1} onChange={(e) => setKuantitas(e.target.value)}/>\r\n                </Form.Group>\r\n\r\n                <br></br>\r\n                <Row>\r\n                    <Col>\r\n                        <Form.Label as=\"h4\">Harga</Form.Label>\r\n                    </Col>\r\n\r\n                    <Col>\r\n                        <Form.Label as=\"h4\">{(parseInt(lebar)+parseInt(tinggi))*parseInt(kuantitas)*2250}</Form.Label>\r\n                    </Col>\r\n\r\n                </Row>\r\n                <br></br>\r\n                <br></br>\r\n                <Button type='submit' variant='primary'>\r\n                    Pesan Custom Pintu\r\n                </Button>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CustomDoorScreen","E:\\sd-new\\frontend\\src\\components\\Loader.js",[],"E:\\sd-new\\frontend\\src\\components\\FormContainer.js",[],"E:\\sd-new\\frontend\\src\\components\\Message.js",[],"E:\\sd-new\\frontend\\src\\components\\CheckoutSteps.js",[],"E:\\sd-new\\frontend\\src\\constants\\orderConstants.js",[],"E:\\sd-new\\frontend\\src\\constants\\userConstants.js",[],"E:\\sd-new\\frontend\\src\\constants\\cartConstants.js",[],"E:\\sd-new\\frontend\\src\\constants\\productConstants.js",[],"E:\\sd-new\\frontend\\src\\actions\\userActions.js",["264"],"import axios from 'axios'\r\nimport {\r\n    USER_LOGIN_REQUEST,\r\n    USER_LOGIN_SUCCESS,\r\n    USER_LOGIN_FAIL,\r\n\r\n    USER_LOGOUT,\r\n\r\n    USER_REGISTER_REQUEST,\r\n    USER_REGISTER_SUCCESS,\r\n    USER_REGISTER_FAIL,\r\n\r\n    USER_DETAILS_REQUEST,\r\n    USER_DETAILS_SUCCESS,\r\n    USER_DETAILS_FAIL,\r\n    USER_DETAILS_RESET,\r\n\r\n    USER_UPDATE_PROFILE_REQUEST,\r\n    USER_UPDATE_PROFILE_SUCCESS,\r\n    USER_UPDATE_PROFILE_FAIL,\r\n    USER_UPDATE_PROFILE_RESET,\r\n\r\n    USER_LIST_REQUEST,\r\n    USER_LIST_SUCCESS,\r\n    USER_LIST_FAIL,\r\n    USER_LIST_RESET,\r\n\r\n    USER_DELETE_REQUEST,\r\n    USER_DELETE_SUCCESS,\r\n    USER_DELETE_FAIL,\r\n\r\n    USER_UPDATE_REQUEST,\r\n    USER_UPDATE_SUCCESS,\r\n    USER_UPDATE_FAIL,\r\n\r\n} from '../constants/userConstants'\r\n\r\nimport { ORDER_LIST_MY_RESET } from '../constants/orderConstants'\r\n\r\nexport const login = (email, password) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_LOGIN_REQUEST\r\n        })\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.post(\r\n            '/api/users/login/',\r\n            { 'username': email, 'password': password },\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_LOGIN_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        localStorage.setItem('userInfo', JSON.stringify(data))\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_LOGIN_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const logout = () => (dispatch) => {\r\n    localStorage.removeItem('userInfo')\r\n    dispatch({ type: USER_LOGOUT })\r\n    dispatch({ type: USER_DETAILS_RESET })\r\n    dispatch({ type: ORDER_LIST_MY_RESET })\r\n    dispatch({ type: USER_LIST_RESET })\r\n}\r\n\r\n\r\nexport const register = (name, email, password) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_REGISTER_REQUEST\r\n        })\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.post(\r\n            '/api/users/register/',\r\n            { 'name': name, 'email': email, 'password': password },\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_REGISTER_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        dispatch({\r\n            type: USER_LOGIN_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        localStorage.setItem('userInfo', JSON.stringify(data))\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_REGISTER_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const getUserDetails = (id) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_DETAILS_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.get(\r\n            `/api/users/${id}/`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_DETAILS_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const updateUserProfile = (user) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_UPDATE_PROFILE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.put(\r\n            `/api/users/profile/update/`,\r\n            user,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_UPDATE_PROFILE_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        dispatch({\r\n            type: USER_LOGIN_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        localStorage.setItem('userInfo', JSON.stringify(data))\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_UPDATE_PROFILE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const listUsers = () => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_LIST_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.get(\r\n            `/api/users/`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_LIST_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_LIST_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const deleteUser = (id) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_DELETE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.delete(\r\n            `/api/users/delete/${id}/`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_DELETE_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_DELETE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const updateUser = (user) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_UPDATE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.put(\r\n            `/api/users/update/${user._id}/`,\r\n            user,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_UPDATE_SUCCESS,\r\n        })\r\n\r\n        dispatch({\r\n            type: USER_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_UPDATE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}","E:\\sd-new\\frontend\\src\\actions\\cartActions.js",[],"E:\\sd-new\\frontend\\src\\actions\\orderActions.js",["265","266","267"],"import axios from 'axios'\r\nimport {\r\n    ORDER_CREATE_REQUEST,\r\n    ORDER_CREATE_SUCCESS,\r\n    ORDER_CREATE_FAIL,\r\n\r\n    ORDER_DETAILS_REQUEST,\r\n    ORDER_DETAILS_SUCCESS,\r\n    ORDER_DETAILS_FAIL,\r\n\r\n    ORDER_PAY_REQUEST,\r\n    ORDER_PAY_SUCCESS,\r\n    ORDER_PAY_FAIL,\r\n    ORDER_PAY_RESET,\r\n\r\n    ORDER_LIST_MY_REQUEST,\r\n    ORDER_LIST_MY_SUCCESS,\r\n    ORDER_LIST_MY_FAIL,\r\n    ORDER_LIST_MY_RESET,\r\n\r\n    ORDER_LIST_REQUEST,\r\n    ORDER_LIST_SUCCESS,\r\n    ORDER_LIST_FAIL,\r\n\r\n    ORDER_DELIVER_REQUEST,\r\n    ORDER_DELIVER_SUCCESS,\r\n    ORDER_DELIVER_FAIL,\r\n    ORDER_DELIVER_RESET,\r\n} from '../constants/orderConstants'\r\n\r\nimport { CART_CLEAR_ITEMS } from '../constants/cartConstants'\r\n\r\n\r\nexport const createOrder = (order) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_CREATE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.post(\r\n            `/api/orders/add/`,\r\n            order,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: ORDER_CREATE_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        dispatch({\r\n            type: CART_CLEAR_ITEMS,\r\n            payload: data\r\n        })\r\n\r\n        localStorage.removeItem('cartItems')\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ORDER_CREATE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const getOrderDetails = (id) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_DETAILS_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.get(\r\n            `/api/orders/${id}/`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: ORDER_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ORDER_DETAILS_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const payOrder = (id, paymentResult) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_PAY_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.put(\r\n            `/api/orders/${id}/pay/`,\r\n            paymentResult,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: ORDER_PAY_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ORDER_PAY_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const deliverOrder = (order) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_DELIVER_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.put(\r\n            `/api/orders/${order._id}/deliver/`,\r\n            {},\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: ORDER_DELIVER_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ORDER_DELIVER_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const listMyOrders = () => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_LIST_MY_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.get(\r\n            `/api/orders/myorders/`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: ORDER_LIST_MY_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ORDER_LIST_MY_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const listOrders = () => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_LIST_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.get(\r\n            `/api/orders/`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: ORDER_LIST_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ORDER_LIST_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}","E:\\sd-new\\frontend\\src\\actions\\productActions.js",["268"],"import axios from 'axios'\r\nimport {\r\n    PRODUCT_LIST_REQUEST,\r\n    PRODUCT_LIST_SUCCESS,\r\n    PRODUCT_LIST_FAIL,\r\n\r\n    PRODUCT_DETAILS_REQUEST,\r\n    PRODUCT_DETAILS_SUCCESS,\r\n    PRODUCT_DETAILS_FAIL,\r\n\r\n    PRODUCT_DELETE_REQUEST,\r\n    PRODUCT_DELETE_SUCCESS,\r\n    PRODUCT_DELETE_FAIL,\r\n\r\n    PRODUCT_CREATE_REQUEST,\r\n    PRODUCT_CREATE_SUCCESS,\r\n    PRODUCT_CREATE_FAIL,\r\n\r\n    PRODUCT_CREATE_V2_REQUEST,\r\n    PRODUCT_CREATE_V2_SUCCESS,\r\n    PRODUCT_CREATE_V2_FAIL,\r\n\r\n    PRODUCT_UPDATE_REQUEST,\r\n    PRODUCT_UPDATE_SUCCESS,\r\n    PRODUCT_UPDATE_FAIL,\r\n\r\n    PRODUCT_CREATE_REVIEW_REQUEST,\r\n    PRODUCT_CREATE_REVIEW_SUCCESS,\r\n    PRODUCT_CREATE_REVIEW_FAIL,\r\n\r\n\r\n    PRODUCT_TOP_REQUEST,\r\n    PRODUCT_TOP_SUCCESS,\r\n    PRODUCT_TOP_FAIL,\r\n\r\n} from '../constants/productConstants'\r\n\r\n\r\nexport const listProducts = (keyword = '') => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: PRODUCT_LIST_REQUEST })\r\n\r\n        const { data } = await axios.get(`/api/products${keyword}`)\r\n\r\n        dispatch({\r\n            type: PRODUCT_LIST_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: PRODUCT_LIST_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const listTopProducts = () => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: PRODUCT_TOP_REQUEST })\r\n\r\n        const { data } = await axios.get(`/api/products/top/`)\r\n\r\n        dispatch({\r\n            type: PRODUCT_TOP_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: PRODUCT_TOP_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const listProductDetails = (id) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: PRODUCT_DETAILS_REQUEST })\r\n\r\n        const { data } = await axios.get(`/api/products/${id}`)\r\n\r\n        dispatch({\r\n            type: PRODUCT_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: PRODUCT_DETAILS_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const deleteProduct = (id) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: PRODUCT_DELETE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.delete(\r\n            `/api/products/delete/${id}/`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: PRODUCT_DELETE_SUCCESS,\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: PRODUCT_DELETE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport const createProduct = () => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: PRODUCT_CREATE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.post(\r\n            `/api/products/create/`,\r\n            {},\r\n            config\r\n        )\r\n        dispatch({\r\n            type: PRODUCT_CREATE_SUCCESS,\r\n            payload: data,\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: PRODUCT_CREATE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const createProductV2 = (product) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: PRODUCT_CREATE_V2_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.post(\r\n            `/api/products/createv2/`,\r\n            product,\r\n            config\r\n        )\r\n        dispatch({\r\n            type: PRODUCT_CREATE_V2_SUCCESS,\r\n            payload: data,\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: PRODUCT_CREATE_V2_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const updateProduct = (product) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: PRODUCT_UPDATE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.put(\r\n            `/api/products/update/${product._id}/`,\r\n            product,\r\n            config\r\n        )\r\n        dispatch({\r\n            type: PRODUCT_UPDATE_SUCCESS,\r\n            payload: data,\r\n        })\r\n\r\n\r\n        dispatch({\r\n            type: PRODUCT_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: PRODUCT_UPDATE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const createProductReview = (productId, review) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: PRODUCT_CREATE_REVIEW_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.post(\r\n            `/api/products/${productId}/reviews/`,\r\n            review,\r\n            config\r\n        )\r\n        dispatch({\r\n            type: PRODUCT_CREATE_REVIEW_SUCCESS,\r\n            payload: data,\r\n        })\r\n\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: PRODUCT_CREATE_REVIEW_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}","E:\\sd-new\\frontend\\src\\components\\Rating.js",[],"E:\\sd-new\\frontend\\src\\components\\SearchBox.js",[],"E:\\sd-new\\frontend\\src\\components\\Paginate.js",[],"E:\\sd-new\\frontend\\src\\components\\Product.js",[],"E:\\sd-new\\frontend\\src\\components\\ProductCarousel.js",[],"E:\\sd-new\\frontend\\src\\screens\\AboutScreen.js",["269"],"import React from 'react'\r\nimport { Container, Row, Col, Card, Image } from 'react-bootstrap'\r\n\r\nfunction AboutUs() {\r\n  return (\r\n    <Container>\r\n      <h1 className='text-center'>About Sarana Pintu</h1>\r\n      <Card>\r\n        <Card.Body>\r\n          <Card.Img src=\"../static/images/about.jpg\" />\r\n        </Card.Body>\r\n      </Card>\r\n      <Row className='m-4'>\r\n        <Col>\r\n          <h3 className='text-center'>Our Business</h3>\r\n          <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.</p>\r\n        </Col>\r\n        <Col>\r\n          <h3 className='text-center'>Logistics</h3>\r\n          <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.</p>\r\n        </Col>\r\n        <Col>\r\n          <h3 className='text-center'>FAQ</h3>\r\n          <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.</p>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default AboutUs","E:\\sd-new\\frontend\\src\\reducers\\notificationReducers.js",[],"E:\\sd-new\\frontend\\src\\screens\\NotificationCenterScreen.js",["270"],"import React, { useState, useEffect } from 'react'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { Table, Button, Row, Col } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport Paginate from '../components/Paginate'\r\nimport { listNotifications, deleteNotification, createNotification } from '../actions/notificationActions'\r\nimport { NOTIFICATION_CREATE_RESET } from '../constants/notificationConstants'\r\n\r\nfunction NotificationCenterScreen({ history, match }) {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const notificationList = useSelector(state => state.notificationList)\r\n    const { loading, error, notifications, pages, page } = notificationList\r\n\r\n    const notificationDelete = useSelector(state => state.notificationDelete)\r\n    const { loading: loadingDelete, error: errorDelete, success: successDelete } = notificationDelete\r\n\r\n    const notificationCreate = useSelector(state => state.notificationCreate)\r\n    const { loading: loadingCreate, error: errorCreate, success: successCreate, notification: createdNotification } = notificationCreate\r\n\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    let keyword = history.location.search\r\n    useEffect(() => {\r\n        dispatch({ type: NOTIFICATION_CREATE_RESET })\r\n\r\n        if (!userInfo.isAdmin) {\r\n            history.push('/login')\r\n        }\r\n\r\n        if (successCreate) {\r\n            history.push(`/admin/notificationcenter/${createdNotification._id}/edit`)\r\n        } else {\r\n            dispatch(listNotifications(keyword))\r\n        }\r\n\r\n    }, [dispatch, history, userInfo, successDelete, successCreate, createdNotification, keyword])\r\n\r\n\r\n    const deleteHandler = (id) => {\r\n\r\n        if (window.confirm('Are you sure you want to delete this notification?')) {\r\n            dispatch(deleteNotification(id))\r\n        }\r\n    }\r\n\r\n    const createNotificationHandler = () => {\r\n        dispatch(createNotification())\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Row className='align-items-center'>\r\n                <Col>\r\n                    <h1>Notification Center</h1>\r\n                </Col>\r\n\r\n                <Col className='text-right'>\r\n                    <Button className='my-3' onClick={createNotificationHandler}>\r\n                        <i className='fas fa-plus'></i> Create Notification\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n\r\n            {loadingDelete && <Loader />}\r\n            {errorDelete && <Message variant='danger'>{errorDelete}</Message>}\r\n\r\n\r\n            {loadingCreate && <Loader />}\r\n            {errorCreate && <Message variant='danger'>{errorCreate}</Message>}\r\n\r\n            {loading\r\n                ? (<Loader />)\r\n                : error\r\n                    ? (<Message variant='danger'>{error}</Message>)\r\n                    : (\r\n                        <div>\r\n                            <Table striped bordered hover responsive className='table-sm'>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>ID</th>\r\n                                        <th>TITLE</th>\r\n                                        <th>DESCRIPTION</th>\r\n                                        <th>LINK</th>\r\n                                        <th>ACTIONS</th>\r\n                                    </tr>\r\n                                </thead>\r\n\r\n                                <tbody>\r\n                                    {notifications.map(notification => (\r\n                                        <tr key={notification._id}>\r\n                                            <td>{notification._id}</td>\r\n                                            <td>{notification.title}</td>\r\n                                            <td>{notification.description}</td>\r\n                                            <td>{notification.link}</td>\r\n\r\n                                            <td>\r\n                                                <LinkContainer to={`/admin/notification/${notification._id}/edit`}>\r\n                                                    <Button variant='light' className='btn-sm'>\r\n                                                        <i className='fas fa-edit'></i>\r\n                                                    </Button>\r\n                                                </LinkContainer>\r\n\r\n                                                <Button variant='danger' className='btn-sm' onClick={() => deleteHandler(notification._id)}>\r\n                                                    <i className='fas fa-trash'></i>\r\n                                                </Button>\r\n                                            </td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </Table>\r\n                            <Paginate pages={pages} page={page} isAdmin={true} />\r\n                        </div>\r\n                    )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NotificationCenterScreen","E:\\sd-new\\frontend\\src\\screens\\NotificationEditScreen.js",["271"],"import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport { Link } from 'react-router-dom'\r\nimport { Form, Button } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport FormContainer from '../components/FormContainer'\r\nimport { listNotificationDetails, updateNotification } from '../actions/notificationActions'\r\nimport { NOTIFICATION_UPDATE_RESET } from '../constants/notificationConstants'\r\n\r\n\r\nfunction NotificationEditScreen({ match, history }) {\r\n\r\n    const notificationId = match.params.id\r\n\r\n    const [title, setTitle] = useState('')\r\n    const [description, setDescription] = useState('')\r\n    const [link, setLink] = useState('')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const notificationDetails = useSelector(state => state.notificationDetails)\r\n    const { error, loading, notification } = notificationDetails\r\n\r\n    const notificationUpdate = useSelector(state => state.notificationUpdate)\r\n    const { error: errorUpdate, loading: loadingUpdate, success: successUpdate } = notificationUpdate\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if (successUpdate) {\r\n            dispatch({ type: NOTIFICATION_UPDATE_RESET })\r\n            history.push('/admin/notificationcenterlist')\r\n        } else {\r\n            if (!notification.name || notification._id !== Number(notificationId)) {\r\n                dispatch(listNotificationDetails(notificationId))\r\n            } else {\r\n                setTitle(notification.title)\r\n                setDescription(notification.description)\r\n                setLink(notification.link)\r\n            }\r\n        }\r\n\r\n\r\n\r\n    }, [dispatch, notification, notificationId, history, successUpdate])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(updateNotification({\r\n            _id: notificationId,\r\n            title,\r\n            description,\r\n            link,\r\n        }))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Link to='/admin/notificationcenterlist'>\r\n                Go Back\r\n            </Link>\r\n\r\n            <FormContainer>\r\n                <h1>Edit Notification</h1>\r\n                {loadingUpdate && <Loader />}\r\n                {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\r\n\r\n                {loading ? <Loader /> : error ? <Message variant='danger'>{error}</Message>\r\n                    : (\r\n                        <Form onSubmit={submitHandler}>\r\n\r\n                            <Form.Group controlId='title'>\r\n                                <Form.Label>Name</Form.Label>\r\n                                <Form.Control\r\n\r\n                                    type='text'\r\n                                    placeholder='Enter title'\r\n                                    value={title}\r\n                                    onChange={(e) => setTitle(e.target.value)}\r\n                                >\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group controlId='description'>\r\n                                <Form.Label>Category</Form.Label>\r\n                                <Form.Control\r\n\r\n                                    type='text'\r\n                                    placeholder='Enter description'\r\n                                    value={description}\r\n                                    onChange={(e) => setDescription(e.target.value)}\r\n                                >\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group controlId='link'>\r\n                                <Form.Label>Description</Form.Label>\r\n                                <Form.Control\r\n\r\n                                    type='text'\r\n                                    placeholder='Enter link'\r\n                                    value={link}\r\n                                    onChange={(e) => setLink(e.target.value)}\r\n                                >\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n\r\n\r\n                            <Button type='submit' variant='primary'>\r\n                                Update\r\n                        </Button>\r\n\r\n                        </Form>\r\n                    )}\r\n\r\n            </FormContainer >\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default NotificationEditScreen","E:\\sd-new\\frontend\\src\\constants\\notificationConstants.js",[],"E:\\sd-new\\frontend\\src\\actions\\notificationActions.js",["272"],"import axios from 'axios'\r\nimport {\r\n    NOTIFICATION_LIST_REQUEST,\r\n    NOTIFICATION_LIST_SUCCESS,\r\n    NOTIFICATION_LIST_FAIL,\r\n\r\n    NOTIFICATION_DETAILS_REQUEST,\r\n    NOTIFICATION_DETAILS_SUCCESS,\r\n    NOTIFICATION_DETAILS_FAIL,\r\n\r\n    NOTIFICATION_DELETE_REQUEST,\r\n    NOTIFICATION_DELETE_SUCCESS,\r\n    NOTIFICATION_DELETE_FAIL,\r\n\r\n    NOTIFICATION_CREATE_REQUEST,\r\n    NOTIFICATION_CREATE_SUCCESS,\r\n    NOTIFICATION_CREATE_FAIL,\r\n\r\n    NOTIFICATION_UPDATE_REQUEST,\r\n    NOTIFICATION_UPDATE_SUCCESS,\r\n    NOTIFICATION_UPDATE_FAIL,\r\n} from '../constants/notificationConstants'\r\n\r\n\r\nexport const listNotifications = (keyword = '') => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: NOTIFICATION_LIST_REQUEST })\r\n\r\n        const { data } = await axios.get(`/api/notifications${keyword}`)\r\n\r\n        dispatch({\r\n            type: NOTIFICATION_LIST_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: NOTIFICATION_LIST_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const listNotificationDetails = (id) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: NOTIFICATION_DETAILS_REQUEST })\r\n\r\n        const { data } = await axios.get(`/api/notifications/${id}`)\r\n\r\n        dispatch({\r\n            type: NOTIFICATION_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: NOTIFICATION_DETAILS_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const deleteNotification = (id) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: NOTIFICATION_DELETE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.delete(\r\n            `/api/notifications/delete/${id}/`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: NOTIFICATION_DELETE_SUCCESS,\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: NOTIFICATION_DELETE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const createNotification = () => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: NOTIFICATION_CREATE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.post(\r\n            `/api/notifications/create/`,\r\n            {},\r\n            config\r\n        )\r\n        dispatch({\r\n            type: NOTIFICATION_CREATE_SUCCESS,\r\n            payload: data,\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: NOTIFICATION_CREATE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const updateNotification = (notification) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: NOTIFICATION_UPDATE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.put(\r\n            `/api/notifications/update/${notification._id}/`,\r\n            notification,\r\n            config\r\n        )\r\n        dispatch({\r\n            type: NOTIFICATION_UPDATE_SUCCESS,\r\n            payload: data,\r\n        })\r\n\r\n\r\n        dispatch({\r\n            type: NOTIFICATION_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: NOTIFICATION_UPDATE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}",{"ruleId":"273","replacedBy":"274"},{"ruleId":"275","replacedBy":"276"},{"ruleId":"277","severity":1,"message":"278","line":2,"column":10,"nodeType":"279","messageId":"280","endLine":2,"endColumn":14},{"ruleId":"281","severity":1,"message":"282","line":53,"column":22,"nodeType":"283","messageId":"284","endLine":53,"endColumn":24},{"ruleId":"281","severity":1,"message":"282","line":34,"column":22,"nodeType":"283","messageId":"284","endLine":34,"endColumn":24},{"ruleId":"277","severity":1,"message":"285","line":1,"column":27,"nodeType":"279","messageId":"280","endLine":1,"endColumn":36},{"ruleId":"277","severity":1,"message":"285","line":1,"column":27,"nodeType":"279","messageId":"280","endLine":1,"endColumn":36},{"ruleId":"277","severity":1,"message":"286","line":1,"column":17,"nodeType":"279","messageId":"280","endLine":1,"endColumn":25},{"ruleId":"287","severity":1,"message":"288","line":43,"column":8,"nodeType":"289","endLine":43,"endColumn":46,"suggestions":"290"},{"ruleId":"281","severity":1,"message":"291","line":142,"column":84,"nodeType":"283","messageId":"284","endLine":142,"endColumn":86},{"ruleId":"292","severity":1,"message":"293","line":13,"column":11,"nodeType":"294","endLine":13,"endColumn":50},{"ruleId":"292","severity":1,"message":"293","line":16,"column":11,"nodeType":"294","endLine":16,"endColumn":50},{"ruleId":"292","severity":1,"message":"293","line":19,"column":11,"nodeType":"294","endLine":19,"endColumn":50},{"ruleId":"292","severity":1,"message":"293","line":22,"column":11,"nodeType":"294","endLine":22,"endColumn":50},{"ruleId":"277","severity":1,"message":"295","line":3,"column":34,"nodeType":"279","messageId":"280","endLine":3,"endColumn":37},{"ruleId":"277","severity":1,"message":"286","line":1,"column":17,"nodeType":"279","messageId":"280","endLine":1,"endColumn":25},{"ruleId":"281","severity":1,"message":"282","line":34,"column":86,"nodeType":"283","messageId":"284","endLine":34,"endColumn":88},{"ruleId":"287","severity":1,"message":"296","line":65,"column":8,"nodeType":"289","endLine":65,"endColumn":62,"suggestions":"297"},{"ruleId":"277","severity":1,"message":"286","line":1,"column":17,"nodeType":"279","messageId":"280","endLine":1,"endColumn":25},{"ruleId":"287","severity":1,"message":"298","line":35,"column":8,"nodeType":"289","endLine":35,"endColumn":26,"suggestions":"299"},{"ruleId":"277","severity":1,"message":"286","line":1,"column":17,"nodeType":"279","messageId":"280","endLine":1,"endColumn":25},{"ruleId":"277","severity":1,"message":"286","line":1,"column":17,"nodeType":"279","messageId":"280","endLine":1,"endColumn":25},{"ruleId":"277","severity":1,"message":"278","line":2,"column":10,"nodeType":"279","messageId":"280","endLine":2,"endColumn":14},{"ruleId":"277","severity":1,"message":"300","line":4,"column":20,"nodeType":"279","messageId":"280","endLine":4,"endColumn":29},{"ruleId":"277","severity":1,"message":"301","line":4,"column":31,"nodeType":"279","messageId":"280","endLine":4,"endColumn":36},{"ruleId":"277","severity":1,"message":"302","line":4,"column":52,"nodeType":"279","messageId":"280","endLine":4,"endColumn":56},{"ruleId":"277","severity":1,"message":"303","line":5,"column":8,"nodeType":"279","messageId":"280","endLine":5,"endColumn":15},{"ruleId":"277","severity":1,"message":"304","line":6,"column":10,"nodeType":"279","messageId":"280","endLine":6,"endColumn":19},{"ruleId":"277","severity":1,"message":"305","line":6,"column":21,"nodeType":"279","messageId":"280","endLine":6,"endColumn":35},{"ruleId":"277","severity":1,"message":"306","line":7,"column":8,"nodeType":"279","messageId":"280","endLine":7,"endColumn":23},{"ruleId":"277","severity":1,"message":"307","line":8,"column":24,"nodeType":"279","messageId":"280","endLine":8,"endColumn":37},{"ruleId":"277","severity":1,"message":"308","line":20,"column":12,"nodeType":"279","messageId":"280","endLine":20,"endColumn":22},{"ruleId":"277","severity":1,"message":"309","line":20,"column":24,"nodeType":"279","messageId":"280","endLine":20,"endColumn":37},{"ruleId":"277","severity":1,"message":"310","line":23,"column":13,"nodeType":"279","messageId":"280","endLine":23,"endColumn":20},{"ruleId":"277","severity":1,"message":"311","line":23,"column":22,"nodeType":"279","messageId":"280","endLine":23,"endColumn":27},{"ruleId":"277","severity":1,"message":"312","line":23,"column":29,"nodeType":"279","messageId":"280","endLine":23,"endColumn":37},{"ruleId":"277","severity":1,"message":"313","line":23,"column":39,"nodeType":"279","messageId":"280","endLine":23,"endColumn":44},{"ruleId":"277","severity":1,"message":"314","line":23,"column":46,"nodeType":"279","messageId":"280","endLine":23,"endColumn":50},{"ruleId":"277","severity":1,"message":"315","line":26,"column":22,"nodeType":"279","messageId":"280","endLine":26,"endColumn":35},{"ruleId":"277","severity":1,"message":"316","line":26,"column":44,"nodeType":"279","messageId":"280","endLine":26,"endColumn":55},{"ruleId":"277","severity":1,"message":"317","line":29,"column":22,"nodeType":"279","messageId":"280","endLine":29,"endColumn":37},{"ruleId":"277","severity":1,"message":"318","line":29,"column":46,"nodeType":"279","messageId":"280","endLine":29,"endColumn":59},{"ruleId":"319","severity":1,"message":"320","line":55,"column":59,"nodeType":"283","messageId":"321","endLine":55,"endColumn":60},{"ruleId":"319","severity":1,"message":"320","line":55,"column":86,"nodeType":"283","messageId":"321","endLine":55,"endColumn":87},{"ruleId":"319","severity":1,"message":"320","line":55,"column":111,"nodeType":"283","messageId":"321","endLine":55,"endColumn":112},{"ruleId":"277","severity":1,"message":"322","line":21,"column":5,"nodeType":"279","messageId":"280","endLine":21,"endColumn":30},{"ruleId":"277","severity":1,"message":"323","line":14,"column":5,"nodeType":"279","messageId":"280","endLine":14,"endColumn":20},{"ruleId":"277","severity":1,"message":"324","line":19,"column":5,"nodeType":"279","messageId":"280","endLine":19,"endColumn":24},{"ruleId":"277","severity":1,"message":"325","line":28,"column":5,"nodeType":"279","messageId":"280","endLine":28,"endColumn":24},{"ruleId":"277","severity":1,"message":"326","line":121,"column":17,"nodeType":"279","messageId":"280","endLine":121,"endColumn":21},{"ruleId":"277","severity":1,"message":"301","line":2,"column":37,"nodeType":"279","messageId":"280","endLine":2,"endColumn":42},{"ruleId":"277","severity":1,"message":"286","line":1,"column":17,"nodeType":"279","messageId":"280","endLine":1,"endColumn":25},{"ruleId":"277","severity":1,"message":"327","line":2,"column":8,"nodeType":"279","messageId":"280","endLine":2,"endColumn":13},{"ruleId":"277","severity":1,"message":"326","line":86,"column":17,"nodeType":"279","messageId":"280","endLine":86,"endColumn":21},"no-native-reassign",["328"],"no-negated-in-lhs",["329"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'useEffect' is defined but never used.","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["330"],"Expected '===' and instead saw '=='.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Row' is defined but never used.","React Hook useEffect has missing dependencies: 'history' and 'userInfo'. Either include them or remove the dependency array.",["331"],"React Hook useEffect has missing dependencies: 'dispatch' and 'order._id'. Either include them or remove the dependency array.",["332"],"'ListGroup' is defined but never used.","'Image' is defined but never used.","'Card' is defined but never used.","'Message' is defined but never used.","'addToCart' is defined but never used.","'removeFromCart' is defined but never used.","'ProductCarousel' is defined but never used.","'deleteProduct' is defined but never used.","'totalHarga' is assigned a value but never used.","'setTotalHarga' is assigned a value but never used.","'loading' is assigned a value but never used.","'error' is assigned a value but never used.","'products' is assigned a value but never used.","'pages' is assigned a value but never used.","'page' is assigned a value but never used.","'loadingDelete' is assigned a value but never used.","'errorDelete' is assigned a value but never used.","'loadingCreateV2' is assigned a value but never used.","'errorCreateV2' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'USER_UPDATE_PROFILE_RESET' is defined but never used.","'ORDER_PAY_RESET' is defined but never used.","'ORDER_LIST_MY_RESET' is defined but never used.","'ORDER_DELIVER_RESET' is defined but never used.","'data' is assigned a value but never used.","'axios' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"333","fix":"334"},{"desc":"335","fix":"336"},{"desc":"337","fix":"338"},"Update the dependencies array to be: [user, userId, successUpdate, history, dispatch]",{"range":"339","text":"340"},"Update the dependencies array to be: [dispatch, order, orderId, successPay, successDeliver, userInfo, history]",{"range":"341","text":"342"},"Update the dependencies array to be: [success, history, order._id, dispatch]",{"range":"343","text":"344"},[1474,1512],"[user, userId, successUpdate, history, dispatch]",[2325,2379],"[dispatch, order, orderId, successPay, successDeliver, userInfo, history]",[1258,1276],"[success, history, order._id, dispatch]"]